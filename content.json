{"pages":[],"posts":[{"title":"「iOS」Lazy load 延遲載入","text":"1234567以往我們創建變數或物件時，通常會在建立完之後馬上進行初始化，以便後續的程式邏輯運用。那萬一初始化的順序沒有寫好時，很容易遇到使用到尚未初始化的變數，造成程式結果出錯，甚至要花時間去找是哪一個步驟出了問題。 如果使用Lazy load創建物件或變數，就可以有效避免這個問題。 使用 Lazy load 有什麼好處 ?Lazy load 可以讓你可以不必關心變數創建的時機，等到真正使用到變數時才去建立，同時也可以保證在使用時一定是被初始化過的狀態，提高記憶體使用效率。 Objective-C 寫法1234567891011121314151617// in @interface@property (nonatomic, weak) UIButton *registerBtn;// in @implementation- (UIButton*)registerBtn{ if(!_registerBtn) { UIButton *button = [UIButton new]; [button setTitle:@&quot;註冊&quot; forState:UIControlStateNormal]; [button addTarget:self action:@selector(registerBtnClick) forControlEvents:UIControlEventTouchUpInside]; // Save _registerBtn = button; } return _registerBtn;} Objective-C 實作原理、注意事項 透過 Override 物件的 getter 方法，在 getter 方法裡面去判斷物件是否存在。若物件不存在 == nil 時則進行物件的初始化，那如果物件已經存在了，則直接return已經初始化完畢的物件。 所以我們在使用Lazy load的物件時，一定要用 self.變數名稱的方式取值。 Swift 寫法12345678910// 若不進行特殊的初始化，非常簡單，只要前方加上lazy就好lazy var dataSource = UIButton()// 若有要進行初始化或邏輯處理，也不複雜lazy var registerBtn: UIButton = { let button = UIButton() button.setTitle(&quot;註冊&quot;, for: .normal) button.addTarget(self, action: #selector(registerBtnClick), for: .touchUpInside) return button}() Swift 實作原理、注意事項 在 Swift 中 Lazy load 只能用 var 來宣告，因為 let 常數必須在宣告的時候就賦值。 還有一個點要注意，就是在Objective-C中可以將lazy變數設置為nil，就可以再重新初始化。在Swift &amp; Objective-C中的nil代表的是不同的意義，在OC中代表空指針，而在Swift中代表空值，所以在Swift中變數=nil時，就等於直接給他賦值nil，所以使用該變數時也不會像OC一樣再進行一次初始化了。","link":"/2021/01/25/%E3%80%8CiOS%E3%80%8DLazy%20load%20%E5%BB%B6%E9%81%B2%E8%BC%89%E5%85%A5/"},{"title":"","text":"ProtoBufDate: Jan 27, 2021Tags: Dev, iOS 什麼是 Protobuf使用 Protobuf 有什麼好處？安裝本次我們會透過 Homebrew 來安裝 Protobuf ，所以在安裝前我們可以先檢測一下是否已安裝過 Homebrew。 1234# 檢測有無安裝 homebrewbrew -v# 如果沒有安裝，可以透過以下指令安裝/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 接著安裝 Protobuf Compiler ，整套會需要安裝 automake、libtool、protobuf 。 123brew install automake brew install libtool brew install protobuf 接下來我們要把 Github 上的 protobuf 下載回來，並且執行位於 protobuf/objectivec/DevTool 下的 full_mac_build.sh 執行檔 123git clone https://github.com/google/protobuf.gitcd protobuf/objectivec/DevTools./full_mac_build.sh 接著要在 Xcode 專案中加入 protobuf library，可以使用 Cocoapods 或是直接把檔案下載拉進專案中，但建議使用 Cocoapods 會比較方便。 12# podfilepod 'Protobuf' 建立 proto 檔與編譯第一步我們先建立 proto 檔，副檔名為 .proto，內容的格式如下。 12345678syntax = &quot;proto3&quot;;package package_name;message TradingAccountRequest { string sessionId = 1; string userToken = 2; string language = 3;} 這裡要注意的是 proto 使用的版本，proto2 與 proto3 有滿大的不同，例如 proto3 就移除了 optional 這個關鍵字，並預設所有欄位都是 optional ，如果搞錯了就會出現以下錯誤。 1Explicit 'optional' labels are disallowed in the Proto3 syntax. To define 'optional' fields in Proto3, simply remove the 'optional' label, as fields are 'optional' by default. 我們準備好 proto 檔以後，第二步要開始進行編譯","link":"/2021/01/27/%E3%80%8CiOS%E3%80%8DProtoBuf%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8/"}],"tags":[{"name":"iOS","slug":"iOS","link":"/tags/iOS/"}],"categories":[{"name":"程式開發","slug":"程式開發","link":"/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"}]}