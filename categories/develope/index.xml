<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>develope on PmThinking產品人-實用工具x高效生活</title>
    <link>https://martinhuang0933.github.io/categories/develope/</link>
    <description>Recent content in develope on PmThinking產品人-實用工具x高效生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 28 Dec 2020 16:56:47 +0600</lastBuildDate><atom:link href="https://martinhuang0933.github.io/categories/develope/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【 iOS 】NSString 要使用 copy 還是 strong 呢？</title>
      <link>https://martinhuang0933.github.io/blog/ios-nsstring-copy-or-strong/</link>
      <pubDate>Mon, 28 Dec 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-nsstring-copy-or-strong/</guid>
      <description>最近在複習 iOS 面試題系列，看到這一題想起幾年前剛接觸 Objective-C ，剛開始觀念還沒有建立起來，也曾經因為這個屬性花了不少時間Debug，雖然現在觀念已經搞懂了，但還是趁這個機會複習筆記一下。
什麼情況下會有差異？ 你可以先記得，大部分的情況都會使用copy。
而 copy 與 strong 的差別，在於 copy 是儲存「值」，strong 是儲存「記憶體位址」。
舉個例子 // .h file @property (strong,nonatomic) NSString *strongStr; @property (copy, nonatomic) NSString *copyStr; // .</description>
    </item>
    
    <item>
      <title>【 Mac 】解決 Touch Bar 失效問題</title>
      <link>https://martinhuang0933.github.io/blog/mac-fix-touchbar/</link>
      <pubDate>Fri, 04 Dec 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/mac-fix-touchbar/</guid>
      <description>自從蘋果在 2016 年在 Macbook 新增 TouchBar 之後，Macbook的使用上又多了一種方式。
但有時候在使用上會遇到一些奇怪的Bug，舉凡 TouchBar 失靈、Esc消失等等，在這裡我記錄了一些解決的方式。
最快解決方案 - 指令 基本上最快的方式就是去終端機下指令，直接由指令重啟 TouchBar 。
&amp;gt; killall ControlStrip  但後來我覺得要記得指令實在是有點違反人性，因為不是每天都會發生失靈的狀況。</description>
    </item>
    
    <item>
      <title>【 iOS 】如何有效地清理 Xcode</title>
      <link>https://martinhuang0933.github.io/blog/ios-how-to-clean-xocde/</link>
      <pubDate>Wed, 02 Dec 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-how-to-clean-xocde/</guid>
      <description>大家都知道 Xcode 除了是吃效能的怪獸以外，同時也是很會吃儲存空間的開發工具。
若一開始再購買 mac 時沒有把硬碟空間買好買滿，那未來在開發時很有可能會遇到空間不足的問題。尤其是在 Xcode 改版時，如果要同時兼容新舊版本，那就會是一件非常痛苦的事。
以下一些清空間的方法，希望可以幫助到還在苦海的各位 (我也曾經在那片海裡QQ)。
1. Build App caches 用途： 儲存各App Build的結果，並生成索引
位置： ~/Library/Developer/Xcode/DerivedData
刪除方法： 直接刪除 DerivedData 內所有檔案即可</description>
    </item>
    
    <item>
      <title>【 iOS 】Unable to simultaneously satisfy constraints 約束設定錯誤處理</title>
      <link>https://martinhuang0933.github.io/blog/ios-fix-layout-constraints/</link>
      <pubDate>Sat, 07 Nov 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-fix-layout-constraints/</guid>
      <description>在iOS開發中，幾乎所有頁面都會使用Autolayout的方式去排版，而在設定完LayoutConstraints後，有時會在Runtime出現一些Error log，雖然不一定會影響顯示出來的排版，但有報錯基本上就要修正。
Error Log [LayoutConstraints] Unable to simultaneously satisfy constraints. Probably at least one of the constraints in the following list is one you don&amp;#39;t want.</description>
    </item>
    
    <item>
      <title>【 iOS 】Singleton Design Pattern 單例設計模式</title>
      <link>https://martinhuang0933.github.io/blog/ios-singleton-design-pattern/</link>
      <pubDate>Sat, 24 Oct 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-singleton-design-pattern/</guid>
      <description>什麼是Singleton？ 在許多物件導向設計的程式語言中，單例設計模式非常常見，而他的實際效益就是可以確保在整個應用程式中只會有一個實體，且生命週期也跟應用程式相同，在應用程式啟動時就會自動幫我們建立了。 在iOS開發學習的過程中也許你已經用了許多Singleton的物件了，只是你還不知道而已，例如：UIColor、FileManager等等。
Singleton 會用在哪些場合？ Singleton因為具有唯一性，所以通常會用於：
 環境變數、已定義的參數檔案 常用的資料處理算法，如字串轉換、時間轉換、資料庫連接、網路連接等等。  Singleton 怎麼寫？ 建立Singleton最基礎的寫法就是判斷實體是不是為空值，如果是空值就會直接建立。 在建立時需要注意執行緒衝突，所以我們需要多加上執行緒的安全機制，實際程式碼如下。
// Objective-C 版本 + (instancetype)shareManager{ @synchronized(self){ if (!</description>
    </item>
    
    <item>
      <title>【書摘】選 3 哲學 - 不平衡才能真正的平衡</title>
      <link>https://martinhuang0933.github.io/blog/read-pick-three/</link>
      <pubDate>Sat, 09 May 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/read-pick-three/</guid>
      <description>有好多事想做，為什麼時間總是不夠？ 有多少人跟曾經的我一樣，工作與生活總是達不到平衡，朝九晚九的工作、長年被犧牲的睡眠、偶爾才回一次的老家、總是明天才開始的運動計劃。
想做的事太多，每一樣都做一點，但每一樣都沒有辦法好好完成，如果你也是這樣，那推薦你看這本書，也許你會得到一些平衡工作與生活的啟發。
什麼是「選三哲學」？ 其實這個概念非常簡單，就是要先理解在一天24小時內基本上是無法兼顧所有事情的。 所以作者 蘭蒂．祖克柏（Randi Zuckerberg）把生活分成五類，在這五類中每天只選擇三項，並好好的完成。
那這五類分別為：工作、睡眠、家庭、運動、朋友。 作者對於每一大分類都有屬於自己的小項目，例如因為興趣而培養出來的副業，也算是在工作的範疇之中，所以我認為每一大分類的小項目都是可以由自己去歸類的。
就只選三項，並且全力以赴 我認為本書的精神除了適度分配每天執行的資源以外，更大的重點是在「全力以赴」。
為什麼會這樣說呢？ 因為只選擇了三項，在精力及資源變多情況下，可以更充分的把精力專注在目標之中，並做得更好。 所以當每天選定三項後，保持專注在所選的項目中，專注並發揮自己 100% 的能力，會有超乎想像的成果。 別擔心剩下沒選的兩項，因為沒選到的項目，明天、後天或是下個月，如果平衡分配，一定會選到的。
挑戰看看，並且紀錄 推薦一位作家叫梅塔Mata。 她曾說過如果看完一本書，但卻沒有把書實作在生活中，那這本書等於是白看了。 不只是要理解書中的好觀念，更要透過實作改變已經僵化的生活模式，這樣才能逐漸提升自我。</description>
    </item>
    
    <item>
      <title>【 iOS 】資訊安全加固方案 - 程式碼混淆(SwiftShield)</title>
      <link>https://martinhuang0933.github.io/blog/ios-information-security-swiftshield/</link>
      <pubDate>Thu, 09 Apr 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-information-security-swiftshield/</guid>
      <description>最近專案接到需求，為了避免程式被反解譯，也避免程式的核心業務邏輯暴露在外，故開始尋找 App 加固的方案。
資訊安全這門領域其實很深，那既然剛入門我們就從基礎的開始，程式碼混淆在資安方案中算是 CP 值比較高的，開發者混淆時付出一些時間(熟悉以後還可以自動化)，但讓駭客就要多付出好幾倍的時間去破解你的程式，所以在基礎的資安加固方案中會比較推薦程式碼混淆。
為什麼要做程式碼混淆？ 最近專案接到需求，為了避免程式被反解譯，也避免程式的核心業務邏輯暴露在外，故開始尋找 App 加固的方案。
資訊安全這門領域其實很深，那既然剛入門我們就從基礎的開始，程式碼混淆在資安方案中算是 CP 值比較高的，開發者混淆時付出一些時間(熟悉以後還可以自動化)，但讓駭客就要多付出好幾倍的時間去破解你的程式，所以在基礎的資安加固方案中會比較推薦程式碼混淆。
.
如何做到程式碼混淆？ 市面上有許多的混淆工具，有收費的也有開源的，如果只是想試點水溫會建議用開源的工具玩玩看。但如果專案有時程壓力，可以試試付費的工具，畢竟省時省力 😂。
這邊我列舉出幾個比較常見的開源混淆工具：
(1) 「rockbruno/SwiftShield」:  這是我比較推薦的一個，效能不錯、評價高、重點是還有在維護。 手動模式（Objective-C、Swift）：採後綴混淆，簡單易用，缺點是有特定後綴的才會混淆，不適合已開發的專案。 自動模式（Swift）：全局混淆，也可以指定特定資料夾不混淆，缺點是有些語法混淆後會出錯，需要手動修復或是修改原本的程式寫法，但錯誤通常不多。  (2) 「LennonChin/Code-Confuse-Plugin」:  僅混淆 Objective-C 項目(.</description>
    </item>
    
  </channel>
</rss>
