<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on PmThinking產品人-實用工具x高效生活</title>
    <link>https://martinhuang0933.github.io/blog/</link>
    <description>Recent content in Blog on PmThinking產品人-實用工具x高效生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 22 Jul 2021 16:56:47 +0600</lastBuildDate><atom:link href="https://martinhuang0933.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【 iOS 】Unable to simultaneously satisfy constraints 約束設定錯誤處理</title>
      <link>https://martinhuang0933.github.io/blog/ios-fix-layout-constraints/</link>
      <pubDate>Thu, 22 Jul 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-fix-layout-constraints/</guid>
      <description>在iOS開發中，幾乎所有頁面都會使用Autolayout的方式去排版，而在設定完LayoutConstraints後，有時會在Runtime出現一些Error log，雖然不一定會影響顯示出來的排版，但有報錯基本上就要修正。
Error Log [LayoutConstraints] Unable to simultaneously satisfy constraints. Probably at least one of the constraints in the following list is one you don&amp;#39;t want.</description>
    </item>
    
    <item>
      <title>【 iOS 】Singleton Design Pattern 單例設計模式</title>
      <link>https://martinhuang0933.github.io/blog/ios-singleton-design-pattern/</link>
      <pubDate>Wed, 21 Jul 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-singleton-design-pattern/</guid>
      <description>什麼是Singleton？ 在許多物件導向設計的程式語言中，單例設計模式非常常見，而他的實際效益就是可以確保在整個應用程式中只會有一個實體，且生命週期也跟應用程式相同，在應用程式啟動時就會自動幫我們建立了。 在iOS開發學習的過程中也許你已經用了許多Singleton的物件了，只是你還不知道而已，例如：UIColor、FileManager等等。
Singleton 會用在哪些場合？ Singleton因為具有唯一性，所以通常會用於：
 環境變數、已定義的參數檔案 常用的資料處理算法，如字串轉換、時間轉換、資料庫連接、網路連接等等。  Singleton 怎麼寫？ 建立Singleton最基礎的寫法就是判斷實體是不是為空值，如果是空值就會直接建立。 在建立時需要注意執行緒衝突，所以我們需要多加上執行緒的安全機制，實際程式碼如下。
// Objective-C 版本 + (instancetype)shareManager{ @synchronized(self){ if (!</description>
    </item>
    
    <item>
      <title>【 iOS 】如何有效地清理 Xcode</title>
      <link>https://martinhuang0933.github.io/blog/ios-how-to-clean-xocde/</link>
      <pubDate>Wed, 21 Jul 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-how-to-clean-xocde/</guid>
      <description>大家都知道 Xcode 除了是吃效能的怪獸以外，同時也是很會吃儲存空間的開發工具。
若一開始再購買 mac 時沒有把硬碟空間買好買滿，那未來在開發時很有可能會遇到空間不足的問題。尤其是在 Xcode 改版時，如果要同時兼容新舊版本，那就會是一件非常痛苦的事。
以下一些清空間的方法，希望可以幫助到還在苦海的各位 (我也曾經在那片海裡QQ)。
1. Build App caches 用途： 儲存各App Build的結果，並生成索引
位置： ~/Library/Developer/Xcode/DerivedData
刪除方法： 直接刪除 DerivedData 內所有檔案即可</description>
    </item>
    
    <item>
      <title>【職場】自我介紹很尷尬？萬用公式讓人留下好印象</title>
      <link>https://martinhuang0933.github.io/blog/self-introduction-method/</link>
      <pubDate>Wed, 21 Jul 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/self-introduction-method/</guid>
      <description>近期為求職旺季，很多應屆的畢業生都逐漸的投入職場。
許多優秀的同學因為沒有入職的經驗，往往不知道第一天會做哪些事情，也不知道要準備些什麼。
那以產品人自身的經驗來說，除了報到、認識公司環境以外，最重要的就是自我介紹，這是個可以快速建立良好第一印象的機會，為你在職場的人際關係打下基礎。
教你自我介紹的萬用公式，讓人留下深刻印象：
我是誰 + 為什麼來這裡 + 我能帶來什麼價值
📌 我是誰： 這個除了你的姓名以外，可以說一說你有做過哪些事蹟，例如我在大學時事擔任社團社長，或是我對於健身有些研究常指導別人等等。
這個環節可以透過簡單的背景故事讓大家初步認識你。
📌 我為什麼來這裡： 如果是入職，可以說因為喜歡公司的哪個部分所以對於公司很有憧憬，同時也想向各位前輩們學習專業知識、領域經驗等。
如果是參加社交活動，可以說我在哪裡得知這個活動，來這裡是想跟大家交流什麼話題等。
這個環節也是讓大家初步認識你，可以簡單敘述，但下一點才是比較重要的。
📌 我能帶來什麼價值： 這一點比較關鍵，如果可以與「我是誰」呼應的話是最好的。</description>
    </item>
    
    <item>
      <title>【 iOS 】NSString 要使用 copy 還是 strong 呢？</title>
      <link>https://martinhuang0933.github.io/blog/ios-nsstring-copy-or-strong/</link>
      <pubDate>Mon, 28 Dec 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-nsstring-copy-or-strong/</guid>
      <description>最近在複習 iOS 面試題系列，看到這一題想起幾年前剛接觸 Objective-C ，剛開始觀念還沒有建立起來，也曾經因為這個屬性花了不少時間Debug，雖然現在觀念已經搞懂了，但還是趁這個機會複習筆記一下。
什麼情況下會有差異？ 你可以先記得，大部分的情況都會使用copy。
而 copy 與 strong 的差別，在於 copy 是儲存「值」，strong 是儲存「記憶體位址」。
舉個例子 // .h file @property (strong,nonatomic) NSString *strongStr; @property (copy, nonatomic) NSString *copyStr; // .</description>
    </item>
    
    <item>
      <title>【 iOS 】資訊安全加固方案 - 程式碼混淆(SwiftShield)</title>
      <link>https://martinhuang0933.github.io/blog/ios-information-security-swiftshield/</link>
      <pubDate>Thu, 09 Apr 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-information-security-swiftshield/</guid>
      <description>最近專案接到需求，為了避免程式被反解譯，也避免程式的核心業務邏輯暴露在外，故開始尋找 App 加固的方案。
資訊安全這門領域其實很深，那既然剛入門我們就從基礎的開始，程式碼混淆在資安方案中算是 CP 值比較高的，開發者混淆時付出一些時間(熟悉以後還可以自動化)，但讓駭客就要多付出好幾倍的時間去破解你的程式，所以在基礎的資安加固方案中會比較推薦程式碼混淆。
為什麼要做程式碼混淆？ 最近專案接到需求，為了避免程式被反解譯，也避免程式的核心業務邏輯暴露在外，故開始尋找 App 加固的方案。
資訊安全這門領域其實很深，那既然剛入門我們就從基礎的開始，程式碼混淆在資安方案中算是 CP 值比較高的，開發者混淆時付出一些時間(熟悉以後還可以自動化)，但讓駭客就要多付出好幾倍的時間去破解你的程式，所以在基礎的資安加固方案中會比較推薦程式碼混淆。
.
如何做到程式碼混淆？ 市面上有許多的混淆工具，有收費的也有開源的，如果只是想試點水溫會建議用開源的工具玩玩看。但如果專案有時程壓力，可以試試付費的工具，畢竟省時省力 😂。
這邊我列舉出幾個比較常見的開源混淆工具：
(1) 「rockbruno/SwiftShield」:  這是我比較推薦的一個，效能不錯、評價高、重點是還有在維護。 手動模式（Objective-C、Swift）：採後綴混淆，簡單易用，缺點是有特定後綴的才會混淆，不適合已開發的專案。 自動模式（Swift）：全局混淆，也可以指定特定資料夾不混淆，缺點是有些語法混淆後會出錯，需要手動修復或是修改原本的程式寫法，但錯誤通常不多。  (2) 「LennonChin/Code-Confuse-Plugin」:  僅混淆 Objective-C 項目(.</description>
    </item>
    
  </channel>
</rss>
