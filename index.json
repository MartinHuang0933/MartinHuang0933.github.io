[{"categories":["Manager"],"contents":"許多產品經理每天打開電腦第一件事就是看數據 舉凡流量、用戶成長率以及轉化率等等。 面對這麼多數據，你真的知道數據要怎麼看嗎？\n其實數據種類再多，只要把握好以下三個分類， 你就可以精準掌握到數據背後的意義。\n1️⃣ 業務數據\n舉例：現金流、轉化率、用戶留存率、活躍度等等。\n這些數據非常重要，因為日常的工作都是為了提升這些核心指標。 例如公司季目標是提升訂單成交率，那轉化率就是核心， 接著會開始分析成交訂單前哪些功能是必要路徑，思考如何讓用戶更方便的下訂單。\n2️⃣ 用戶背景數據\n舉例：用戶性別、地區、興趣標籤等等\n我們可以透過用戶背景與行為數據去尋找它跟業務指標的關聯性。 例如我們產品的主要市場是 25 歲到 35 歲的職場女性， 對新品與優惠商品的購買力較強，也許可以透過限時限量的優惠促銷來刺激訂單。\n3️⃣ 用戶行為數據\n舉例：頁面停留時長、存取頁面、頁面路徑分析。\n用戶行為通常會跟用戶背景關聯著看，也是用來協助提高業務指標。 例如用戶在把商品加入到購物車後，通常在 1 天內下訂單的機率是最高的， 如果超過三天用戶沒有再回來購物車，那此商品很高機率會被用戶遺忘。 所以可以透過發送優惠卷的方式來刺激用戶下訂單。\n總結用戶數據分析的三大類別：\n 業務數據：跟公司盈利有極大關係，通常會當為 KPI。 用戶背景數據：可以釐清用戶的模樣，推理出用戶客群。 用戶行為數據：用戶背景與行為會一起分析，尋找跟業務指標的關聯性，才知道如何制定策略。  ✨ 追蹤產品人 @pmthinking ，讓你的專業更加分。\n✨ 對於產品知識還有什麼想知道的呢？ 歡迎留言發問！\n","date":"01","image":"images/post/PM-categories-data-analysis.jpg","permalink":"https://martinios.com/blog/pm-categories-data-analysis/","tags":["PM","數據分析","GA"],"title":"【 PM 】產品新手如何分析數據？帶你深入淺出數據知識"},{"categories":["Manager"],"contents":"近期為求職旺季，很多應屆的畢業生都逐漸的投入職場。\n許多優秀的同學因為沒有入職的經驗，往往不知道第一天會做哪些事情，也不知道要準備些什麼。\n那以產品人自身的經驗來說，除了報到、認識公司環境以外，最重要的就是自我介紹，這是個可以快速建立良好第一印象的機會，為你在職場的人際關係打下基礎。\n教你自我介紹的萬用公式，讓人留下深刻印象：\n我是誰 + 為什麼來這裡 + 我能帶來什麼價值\n📌 我是誰： 這個除了你的姓名以外，可以說一說你有做過哪些事蹟，例如我在大學時事擔任社團社長，或是我對於健身有些研究常指導別人等等。\n這個環節可以透過簡單的背景故事讓大家初步認識你。\n📌 我為什麼來這裡： 如果是入職，可以說因為喜歡公司的哪個部分所以對於公司很有憧憬，同時也想向各位前輩們學習專業知識、領域經驗等。\n如果是參加社交活動，可以說我在哪裡得知這個活動，來這裡是想跟大家交流什麼話題等。\n這個環節也是讓大家初步認識你，可以簡單敘述，但下一點才是比較重要的。\n📌 我能帶來什麼價值： 這一點比較關鍵，如果可以與「我是誰」呼應的話是最好的。\n可以說在某個領域有一些資源，或是自己有哪些專業知識，可以給大家提供交流或是教學。\n不一定是要很專業的技能，例如自己常常會組桌遊團、有很多美食的口袋名單可以分享。\n🔥 舉個例子： 大家好，我是產品人，我的興趣是分享事物，之前在書籍交流社群擔任企劃，有幾次舉辦講座或是分享會的經驗，對商務活動空間或是咖啡廳都有一些不錯的口袋名單，想辦活動或是對咖啡廳有興趣的可以找我，謝謝！\n✨ 這個萬用的自我介紹公式，除了可以用在職場以外，也可以用於很多社交場合。 出社會以後的交友模式跟學生時期會有滿大的不一樣，除了相同興趣、目標以外，如果你有給他人帶來價值的能力，那他人會特別對你感興趣。 有人可能會說這樣交朋友的方式很勢利、很現實，但每一個社會人士其實都很忙，故建立連結也相對困難，但如果你可以給他人帶來價值，這就提供了一個機會讓你們後續可以有更多的交流。 ‼️ 不過有一點要注意的是，幫助他人的同時，也要評估一下是否在自身的能力範圍內，不要因為想幫別人勉強自己。\n","date":"21","image":"images/post/Business-Self-introduction-Method.jpg","permalink":"https://martinios.com/blog/business-self-introduction-method/","tags":["職場","自我介紹"],"title":"【職場】自我介紹很尷尬？萬用公式讓人留下好印象"},{"categories":["Manager"],"contents":"最近到了畢業季，是一年一度校園招募的季節。 剛畢業對於職場還很陌生的你，準備好要如何跟面試官應對了嗎？ 如果你正在準備面試，那這篇文章正是你最需要的！\n面試除了是展現自己最好的一面以外，更是要傳達面試官想看到部分， 讓面試官覺得自己就是最適合這個職缺的應聘者。 以下這三個能力，就是面試官最看重的部分：\n1️⃣ 專業能力\n面試官看你是否具備這個職位所要求的專業能力， 例如你有沒有這個職缺相關的相關工作經驗或是實習經驗， 能證明你對這個領域熟悉，並且有實際參與執行過。\n2️⃣ 個人能力\n個人能力是指一個人的邏輯思維、溝通管理、表達能力、抗壓度等等。 目的是要看你是不是一個做事有方法、有邏輯，且具備溝通能力可以協調任務的人 團隊是人與人之間的合作，並不是獨自完成工作就好。\n3️⃣ 未來潛力\n潛力就是你跟公司可以一同成長多久，是不是可以長期合作的夥伴。 例如職業規劃是如何？以及如何看待這個行業？你為什麼加入我們公司？ 這些觀點都是想理解你對於工作、產業、職涯的看法。\n總結面試官看重的三大能力，幫助我們面試加分：\n 專業能力，看你是否具備這個職位所要求的專業能力。 個人能力，看你的邏輯思維、溝通管理、表達能力。 未來潛力，理解你對於工作、產業、職涯的看法。  ✨ 追蹤產品人 @pmthinking ，陪你一起成長\n✨ 對於面試技巧還有什麼想知道的呢？ 歡迎留言發問！\nResources : Illustration by Julia from Ouch!\n","date":"05","image":"images/post/Business-interview-Skills.jpg","permalink":"https://martinios.com/blog/business-interview-skills/","tags":["職場","能力提升","職場","面試"],"title":"【職場】展現三大能力，大幅提高面試成功率"},{"categories":["Manager"],"contents":"又到了專案要驗收進度的時候了， 你是屬於還是最後一刻還在趕工？還是進度早已按計劃完成？ 如果你是前者，那你一定要學習拆解工作項目的四個法則！\n在專案管理技巧中，有一個專業知識叫工作分解結構 WBS (Work Breakdown Structure)，這個步驟就是要把專案所有必要的工作找出來，並且根據類別區分，做為定義完整專案工作的依據。\n例如：我在舉辦講座時，會把每個時段、每個組別、每個事務都明確列出來，列出來以後我才可以預估要去搜集哪些資源、要去協調哪些人、要準備與產出哪些事務，這個流程表出來以後，我就知道要如何分配工作事項了。\n當你把事情分類出來以後，一定會遇到一個問題，那就是工作項目可能需要好幾個工作日來完成。 例如：需要五天開發，如果你就老實的安排五天，那假設到了第四天你去詢問進度時，才發現負責人只完成 30%，那就會出現了專案進度 Delay 的情況，這時候整個專案的壓力就會提高。\n那要如何才能有效地規劃工作時程呢？不會切的太粗糙，也不會切得太瑣碎。 教你四個法則，讓你順利掌握工作進度。\n1️⃣ 盡可能的拆細，工作項目越細越準（消除不確定性）\n這個可以依照你對專案的把握度進行調整。 如果你對專案把握度低，可以盡可能的拆分工作項目，你對整個全貌越清楚，對時間掌握越準。\n2️⃣ 每個工作項目都要有交付物（讓成果明確）\n盡量每個工作項目都要有產出，這樣才可以確認是否已經完成，以達到工作進度的量化。 例如：軟體開發大多需要前端與後端作業的配合，那前端畫面完成是一項產出，後端資料 API 完成也可以是產出，每個產出都代表功能開發有在逐漸推進。\n3️⃣ 每個工作項目都要有單一負責人（讓責任明確）\n若單一工作項目需要多人一起處理，我們應該將工作項細部拆解，工作量與交付物明確定義清楚，讓工作項目只有一個負責人，以便釐清工作項目的責任歸屬。\n4️⃣ 每個工作項目時間短於兩個工作天（讓回饋期短）\n若單一工作項目需要超過兩個工作天，可能會遇到開發了好幾天，但產出仍不明確的情況。 所以要將讓每個小工作項目都能控制在兩天內，縮短回饋週期，才可以即時掌握項目執行的進度。\n總結「工作分解結構 WBS」的四大技巧，幫助我們細分工作項目：\n 盡可能的拆細工作項目，拆越細越了解專案該做哪些事。 每個工作項目都要有交付物，才能有效的檢核工作項目是否完成。 每個工作項目都要有單一負責人，不僅釐清責任，更方便指派任務。 每個工作項目時間短於兩個工作天，縮短回饋與檢核的時間，讓風險降到最低。  ✨ 追蹤產品人 @pmthinking ，陪你一起成長\n✨ 你平常都是如何劃分工作項目呢？ 歡迎留言跟我分享！\n","date":"04","image":"images/post/PM-Work-Breakdown-Structure.jpg","permalink":"https://martinios.com/blog/pm-work-breakdown-structure/","tags":["PM","專案管理","WBS"],"title":"【 PM 】專案常常 Delay？四個法則帶你拆解工作項目！"},{"categories":["Manager"],"contents":"身為產品經理，對產品有無限多個優化的點子 但要如何挑選出可以帶來最大效益的優化方案呢？\n這次要介紹的是日本東京理工大學教授狩野紀昭(Noriaki Kano)在1984年提出的「二維品質模式」，也稱為狩野模型，將功能需求的品質與滿意度畫在二維座標軸上，以四個象限來分析需求可以帶來的效益。\n基本需求型：圖中的綠線，是客戶眼中的基本功能，做得好不會加分，但做不好可是會大大扣分的，例如：外賣平台的購買與結帳付款流程。\n期望型：圖中的藍線，這類需求會隨著品質的提升，讓客戶滿意度也提升，例如：外賣平台可點餐的餐廳數量越多越好，餐點價格越划算客戶就會越滿意。\n魅力型：圖中的紅線，這類需求是屬於客戶沒有預期的功能，但品質來到一定程度以後，會讓客戶覺得驚艷，對產品、品牌感到加分，例如有些 Uber 司機會在車上提供空氣除菌機、消毒酒精，這些屬於非必要的額外服務，但會讓你感到加分。\n無差異型：圖中的灰色區域，這類需求無論品質好壞，使用者都不會太大的感覺，例如：吃速食或是夜市的時候，餐點的擺盤與精緻度可能就不會是重點，就算花了許多心思，用戶也不一定能有明顯的感受。\n總結「狩野模型」的三大重點，幫助我們判斷需求的優先級：\n 先滿足基本需求型的功能，讓產品可以正常運作，先求有再求好。 靠期望型的需求不斷優化產品，同時你也可以感受到產品持續進步。 靠魅力型的需求來讓產品加分，這樣才有辦法做出口碑，打開知名度與客群。  ✨ 追蹤產品人 @，讓我陪你一起成長\n✨ 你認為優秀的產品經理是什麼模樣呢？ 歡迎留言跟我說！\n","date":"15","image":"images/post/PM-KANO.jpg","permalink":"https://martinios.com/blog/pm-kano/","tags":["PM","產品經理","狩野模型","KANO","優化產品"],"title":"【 PM 】為什麼產品優化了，客戶卻沒有更滿意？"},{"categories":["Manager"],"contents":"在產品經理的成長道路上，總是有許多知識要學 而哪些觀念造就了產品經理的差異呢？\n以下總結三點常見的觀念，讓你成為優秀的產品經理\n  你不一定需要真的把產品做出來\n但你一定要知道產品怎麼做。    你不一定要取得所有數據，\n但要知道遇到問題該看哪些數據。\n  具有全局觀，瞭解每個需求背後的意義\n  ✨ 追蹤產品人 @，讓我陪你一起成長\n✨ 你認為優秀的產品經理是什麼模樣呢？ 歡迎留言跟我說！\n","date":"05","image":"images/post/PM-3Key-skills.jpg","permalink":"https://martinios.com/blog/pm-key-skills/","tags":["PM","產品經理","自我提升"],"title":"【PM】成為優秀產品經理的三個要素"},{"categories":["Develope"],"contents":"最近在複習 iOS 面試題系列，看到這一題想起幾年前剛接觸 Objective-C ，剛開始觀念還沒有建立起來，也曾經因為這個屬性花了不少時間Debug，雖然現在觀念已經搞懂了，但還是趁這個機會複習筆記一下。\n什麼情況下會有差異？ 你可以先記得，大部分的情況都會使用copy。\n而 copy 與 strong 的差別，在於 copy 是儲存「值」，strong 是儲存「記憶體位址」。\n舉個例子 // .h file @property (strong,nonatomic) NSString *strongStr; @property (copy, nonatomic) NSString *copyStr; // .m file NSMutableString *mutableStr = [NSMutableString stringWithFormat:@\u0026quot;abc\u0026quot;]; // 將mutableStr賦值給retainStr、copyStr self.strongStr = mutableStr; self.copyStr = mutableStr; // 將 mutableStr 更改為 xyz [mutableStr appendString:@\u0026quot;xyz\u0026quot;]; // 印出三個字串的值 NSLog(@\u0026quot;mutableStr = %@\u0026quot;,mutableStr); NSLog(@\u0026quot;strongStr = %@\u0026quot;,self.strongStr); NSLog(@\u0026quot;copyStr = %@\u0026quot;,self.copyStr); // 輸出值 // mutableStr = xyz // strongStr = xyz // copyStr = abc 可以發現，此時 copy 屬性字串並不會因為賦值來源而更改值，反而是strong屬性的字串隨著來源而改變了。\n這是因為 copy 屬性是對於來源做了深拷貝，是將 mutableStr 的數值複製到了 copyStr 上；而 strong 屬性是指向來源的記憶體位址，所以當原本的 mutableStr 改變時，strongStr 也會跟著改變。\n 接著我們在來看一下這三個字串的記憶體位址\n// 印出三個字串的記憶體位址 mutableStr = abcxyz StrStrong = abcxyz StrCopy = abc // 輸出記憶體位址 // mutableStr = 0x6000030ee520 // StrStrong = 0x6000030ee520 // StrCopy = 0xc09e09c05a166394 這時候我們可以看到 mutableStr 與 StrStrong 的記憶體位址是相同的，代表他們兩個儲存值的地方是一樣的，所以才會造成改變 mutableStr 後 StrStrong 也跟著更改的情況。\n小結 比較簡單的記憶法就是 NSString 用 Copy 就好，因為實務上也很少會使用 Strong 屬性的情境。\n雖然現在 Objective-C 比較少人在用了，不過有時候面試還是會考到類似的觀念題，所以邊複習邊整理文章，希望對開發者有些幫助。\n","date":"28","image":null,"permalink":"https://martinios.com/blog/ios-nsstring-copy-or-strong/","tags":["iOS","Swift","Objective-C"],"title":"【 iOS 】NSString 要使用 copy 還是 strong 呢？"},{"categories":["develope"],"contents":"自從蘋果在 2016 年在 Macbook 新增 TouchBar 之後，Macbook的使用上又多了一種方式。\n但有時候在使用上會遇到一些奇怪的Bug，舉凡 TouchBar 失靈、Esc消失等等，在這裡我記錄了一些解決的方式。\n最快解決方案 - 指令 基本上最快的方式就是去終端機下指令，直接由指令重啟 TouchBar 。\n\u0026gt; killall ControlStrip  但後來我覺得要記得指令實在是有點違反人性，因為不是每天都會發生失靈的狀況。\n所以我把指令包成 command file，只要連點兩下就可以執行了。\n下載連結\n有需要的可以下載使用。\n","date":"04","image":null,"permalink":"https://martinios.com/blog/mac-fix-touchbar/","tags":["iOS","Xcode","develope"],"title":"【 Mac 】解決 Touch Bar 失效問題"},{"categories":["develope"],"contents":"大家都知道 Xcode 除了是吃效能的怪獸以外，同時也是很會吃儲存空間的開發工具。\n若一開始再購買 mac 時沒有把硬碟空間買好買滿，那未來在開發時很有可能會遇到空間不足的問題。尤其是在 Xcode 改版時，如果要同時兼容新舊版本，那就會是一件非常痛苦的事。\n以下一些清空間的方法，希望可以幫助到還在苦海的各位 (我也曾經在那片海裡QQ)。\n1. Build App caches 用途： 儲存各App Build的結果，並生成索引\n位置： ~/Library/Developer/Xcode/DerivedData\n刪除方法： 直接刪除 DerivedData 內所有檔案即可\n備註： 對於 DerivedData 有興趣的可以看這裡\n2. iOS DeviceSupport 用途： 儲存 iOS 的版本\n位置： ~/Library/Developer/Xcode/iOS DeviceSupport\n刪除方法： 直接刪除iOS版本即可，如14.2 (18B92)\n備註： 以實機開發時，每一台設備的版本被都會儲存起來，如果你用許多不同的iOS的版本在測試，那使用空間就會很可觀\n3. Simulator devices 用途： 模擬器版本\n位置： ~/Library/Developer/CoreSimulator/Devices\n刪除方法： 至終端機下指令xcrun simctl delete unavailable\n4. Archives \u0026amp; .ipa file 用途： 每次打包專案時都會產生，用來提交 App Store 或是TestFlight 等等\n位置： ~/Library/Developer/Xcode/Archives\n刪除方法： 直接刪除即可\n備註： 若為已上線之產品，建議預留最後3-5個的版本\n5. Logs 用途： 就，Log\n位置： ~/Library/Developer/Xcode/iOS Device Logs\n刪除方法： 直接刪除 iOS Device Logs 內所有檔案即可\n6. Others cache 用途： 整個資源庫的快取\n位置： ~/Library/Caches/\n刪除方法： 直接刪除 Caches 內所有檔案即可\n備註： 若不放心，可以將資料夾移到桌面，再重啟電腦看有沒有異狀。\n 工具推薦： App DevCleaner for Xcode\n非常實用的工具，可以快速清除 DeviceSupport、DerivedData、Archives 等等快取檔案。 詳細的使用方法可以參考彼得潘的教學\n總結： 雖然這些肥大的檔案總是讓我們恨得牙癢癢，但不得不說這些檔案確實在編譯階段幫我們省下了不少時間，也是一種用空間換時間的概念。\n剛好遇到問題所以隨筆記錄一下，同時希望這些方法也有幫助到你。\n","date":"02","image":null,"permalink":"https://martinios.com/blog/ios-how-to-clean-xocde/","tags":["iOS","Xcode","develope"],"title":"【 iOS 】如何有效地清理 Xcode"},{"categories":["develope"],"contents":"在iOS開發中，幾乎所有頁面都會使用Autolayout的方式去排版，而在設定完LayoutConstraints後，有時會在Runtime出現一些Error log，雖然不一定會影響顯示出來的排版，但有報錯基本上就要修正。\nError Log [LayoutConstraints] Unable to simultaneously satisfy constraints. Probably at least one of the constraints in the following list is one you don\u0026#39;t want. Try this: (1) look at each constraint and try to figure out which you don\u0026#39;t expect; (2) find the code that added the unwanted constraint or constraints and fix it. ( \u0026#34;\u0026lt;MASLayoutConstraint:0x600000393660 UIButton:0x7fe97b466f20.right == UIView:0x7fe97b458ba0.right - 20\u0026gt;\u0026#34;, \u0026#34;\u0026lt;NSLayoutConstraint:0x6000004f1a90 UIImageView:0x7fe97b4671d0.leading == UIButton:0x7fe97b466f20.trailing + 8\u0026gt;\u0026#34;, \u0026#34;\u0026lt;NSLayoutConstraint:0x6000004f1540 UIView:0x7fe97b458ba0.trailing == UIImageView:0x7fe97b4671d0.trailing + 20\u0026gt;\u0026#34; ) Will attempt to recover by breaking constraint \u0026lt;NSLayoutConstraint:0x600001baebc0 UIImageView:0x7fe97b4671d0.leading == UIButton:0x7fe97b466f20.trailing + 8\u0026gt; Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger. The methods in the UIConstraintBasedLayoutDebugging category on UIView listed in \u0026lt;UIKitCore/UIView.h\u0026gt; may also be helpful. 什麼情況會出現這個錯誤？ 一般來說，出現這種警告有兩種情況：\n 使用xib的內建View，對其中子元件增加了Autolayout約束，在使用xib後又調整了View的框架 純Code的方式使用Autolayout，但沒有對使用的ViewAutoresizingMaskIntoConstraints的屬性設置為false。  如何快速找出有問題的元件？ 其實在Error log中有給出很明錯錯誤的地方，那就是在log中Will attempt to recover by breaking constraint的下一行，就是我們要尋找的約束。\n// 關鍵線索 Will attempt to recover by breaking constraint \u0026lt;NSLayoutConstraint:0x600001baebc0 UIImageView:0x7fe97b4671d0.leading == UIButton:0x7fe97b466f20.trailing + 8\u0026gt; 但初學者在看到這個錯誤時會特別的頭痛，因為在Error log中通常只會寫出哪個元件的類型，例如：NSLayoutConstraint、UIImageView等等，這樣對於比較複雜的頁面會很難找出錯誤的約束。\nXcode其實提供了一個很方便的Debug功能，可以幫助我們迅速地找到錯誤的約束，而我們要使用的就是Xcode內建的Debug View Hierarchy。\n使用Debug View Hierarchy找出元件 STEP 1： 執行App STEP 2： 點選 Xcode 下方的 Debug View Hierarchy 這時候你會看到整個App所有View的結構，是不是很方便呢\nSTEP 3： 找出錯誤約束的實體位址 還記得剛剛我們有特別找出錯誤的約束嗎？\nWill attempt to recover by breaking constraint // 我們要的就是NSLayoutConstraint的實體位址0x600001baebc0 \u0026lt;NSLayoutConstraint:0x600001baebc0 UIImageView:0x7fe97b4671d0.leading == UIButton:0x7fe97b466f20.trailing + 8\u0026gt; 而我們要找的就是第3行的部分，將NSLayoutConstraint的實體位址0x600001baebc0複製起來。\nSTEP 4： 用實體位址去找出錯誤的約束在哪裡 接著我們去左邊Debug navigator搜尋，並以剛剛的0x600001baebc0過濾元件，這時候就可以很快速的找到出錯的約束了。\n總結 以前在初學的時候，遇到這個問題總是很頭痛，有一種大海撈針的感覺。\n而現在透過Xcdoe內建的Debug View Hierarchy就可以很快速的找到特定的元件，有時也可以查看UI元件的排版是不是有誤，真的是很方便很多。\n","date":"07","image":null,"permalink":"https://martinios.com/blog/ios-fix-layout-constraints/","tags":["iOS","Xcode","develope"],"title":"【 iOS 】Unable to simultaneously satisfy constraints 約束設定錯誤處理"},{"categories":["develope"],"contents":"什麼是Singleton？ 在許多物件導向設計的程式語言中，單例設計模式非常常見，而他的實際效益就是可以確保在整個應用程式中只會有一個實體，且生命週期也跟應用程式相同，在應用程式啟動時就會自動幫我們建立了。 在iOS開發學習的過程中也許你已經用了許多Singleton的物件了，只是你還不知道而已，例如：UIColor、FileManager等等。\nSingleton 會用在哪些場合？ Singleton因為具有唯一性，所以通常會用於：\n 環境變數、已定義的參數檔案 常用的資料處理算法，如字串轉換、時間轉換、資料庫連接、網路連接等等。  Singleton 怎麼寫？ 建立Singleton最基礎的寫法就是判斷實體是不是為空值，如果是空值就會直接建立。 在建立時需要注意執行緒衝突，所以我們需要多加上執行緒的安全機制，實際程式碼如下。\n// Objective-C 版本 + (instancetype)shareManager{ @synchronized(self){ if (!manager) { manager = [[self alloc]init]; } return manager; } } 也可以透過GCD的方式建立\n// Objective-C 版本 , 使用GCD static DataManager *manager = nil; @implementation DataManager + (instancetype)shareManager{ static dispatch_once_t onceToken; dispatch_once(\u0026amp;onceToken, ^{ manager = [[self alloc] init]; }); return manager; } @end 此時Singleton就已經寫好了，只要我們在外面呼叫shareManager這個方法，返回的實體始終是一個，因為dispatch_once只執行一次。\n// Objective-C 版本 , 呼叫 Singleton { [DataManager shareManager]; } ","date":"24","image":null,"permalink":"https://martinios.com/blog/ios-singleton-design-pattern/","tags":["iOS","Design Pattern","develope"],"title":"【 iOS 】Singleton Design Pattern 單例設計模式"},{"categories":["Life"],"contents":".\n 現在你的模樣，就是由每過去的自己拼湊而成； 所以你現在所走的每一步，都正在定義你未來的模樣。\n .\n你是否曾經想過三年後的自己會是什麼樣子？ 前一陣子偶然加入創業小聚的討論，聊到創業過程中的大小事以及過來人的經驗談。 我發現在社群中很多人都在開創事業的道路上努力，無論收入高低、職業族群等等，大家都有一個共通點，都擁有自己理想目標的藍圖。\n在你心中，理想目標的藍圖會是什麼模樣呢？ 每個人都有屬於自己獨特的答案，可能是在舞台上發光發熱，也有可能是在喜歡的城市裡愜意生活。 但無論是什麼，出發總要有個方向，有目標我們才知道要往哪裡努力、前進。\n.\n有了目標，就大膽的往理想前進 清楚了自己想要什麼，知道目標在哪裡後，恭喜你離理想又更進了一步。\n在上週的討論中，Metta也有分享她實作過的生活儀式，對於創造理想的生活非常的有幫助。 她的實作方法是由早晨開始，總共會花大約30分鐘到60分鐘，長短可以自己決定，主要分為三個步驟，在起床後執行，每一步驟執行10-20分鐘。\nSTEP 1 . 自律 很多上班族因為上班時間較長，覺得下班時間特別寶貴，晚上回到家想放鬆一下追個劇、滑個手機，一轉眼就過了午夜12點，但劇還沒追完又捨不得睡，結果熬夜造成隔天上班效率不高，就形成了加班與熬夜的惡性循環。\n所以邁向理想生活的第一步，是要培養正常作息，起床後簡單運動去喚醒身體。 可以採用暖身瑜伽的方式，不會太激烈，對身體的負擔較小；或是你跟我一樣偶爾會賴床的話，可以去室外曬太陽散散步，可以提升體內血清素，血清素可以讓注意力集中、穩定情緒，讓大腦清醒過來。\nSTEP 2 . 盡情想像，細心感受 這一步我們要做的，就是在腦袋清醒過後，逐漸把專注力放在想像未來的畫面上。\n剛開始，你可以想像未來中的自己出現在哪裡？可能是在舞台上、又或是在海灘。 接下來可以想你正在做什麼事、看到了什麼場景、聽到了什麼聲音等等，任何一切的細節都值得想像。 例如你想成為講師，那可以想像你在台上演講的模樣、台下觀眾的反應、舞台的佈置、甚至是會後的交流等等。\nSTEP 3 . 不只是想像，更要計畫 在有了具體的目標畫面以後，下一步就是要開始逐步計畫要怎麼實現。\n剛開始，你可以先檢視自己現在與未來的差距，缺了什麼專業技能、缺了什麼經驗等等，了解要加強哪一個部分。 接著再擬定方案去想要怎麼增強自己的能力去達成目標，每天撥30-60分鐘學習專業技能、在工作或生活上努力爭取實作經驗等等，過程中也可以搭配九宮格筆記法去輔助自己思考。\n.\n結語  You can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.\n你無法預先把現在所發生的點點滴滴串聯起來，只有在未來回顧今日時，你才會明白這些點點滴滴是如何串在一起的。所以你現在必須相信，眼前現在發生的點點滴滴，將來都會連結在一起。\n− Steve Jobs.\n 當你真的開始做之後，會發現原本遙不可及的理想，漸漸成為了一個個的目標。 有目標不代表每件事都會照著計劃走，但目標與計畫能讓你有目的性的行動，每天都在為了理想而前進。 而在努力過後，回頭觀望你達成每一個里程碑時，你會發現你的生活正在逐漸變成心中理想的模樣。\n","date":"14","image":"https://i.imgur.com/N3b8BBn.jpg","permalink":"https://martinios.com/blog/designing-your-life/","tags":["生活","Life","自我提升"],"title":"如何創造你想要的生活？"},{"categories":["develope"],"contents":"有好多事想做，為什麼時間總是不夠？ 有多少人跟曾經的我一樣，工作與生活總是達不到平衡，朝九晚九的工作、長年被犧牲的睡眠、偶爾才回一次的老家、總是明天才開始的運動計劃。\n想做的事太多，每一樣都做一點，但每一樣都沒有辦法好好完成，如果你也是這樣，那推薦你看這本書，也許你會得到一些平衡工作與生活的啟發。\n什麼是「選三哲學」？ 其實這個概念非常簡單，就是要先理解在一天24小時內基本上是無法兼顧所有事情的。 所以作者 蘭蒂．祖克柏（Randi Zuckerberg）把生活分成五類，在這五類中每天只選擇三項，並好好的完成。\n那這五類分別為：工作、睡眠、家庭、運動、朋友。 作者對於每一大分類都有屬於自己的小項目，例如因為興趣而培養出來的副業，也算是在工作的範疇之中，所以我認為每一大分類的小項目都是可以由自己去歸類的。\n就只選三項，並且全力以赴 我認為本書的精神除了適度分配每天執行的資源以外，更大的重點是在「全力以赴」。\n為什麼會這樣說呢？ 因為只選擇了三項，在精力及資源變多情況下，可以更充分的把精力專注在目標之中，並做得更好。 所以當每天選定三項後，保持專注在所選的項目中，專注並發揮自己 100% 的能力，會有超乎想像的成果。 別擔心剩下沒選的兩項，因為沒選到的項目，明天、後天或是下個月，如果平衡分配，一定會選到的。\n挑戰看看，並且紀錄 推薦一位作家叫梅塔Mata。 她曾說過如果看完一本書，但卻沒有把書實作在生活中，那這本書等於是白看了。 不只是要理解書中的好觀念，更要透過實作改變已經僵化的生活模式，這樣才能逐漸提升自我。\n儘管只挑選三項有時候是很困難的，但請好好保持，並且搭配紀錄，實作1-2個月後你可以回頭審視你的時間分配是不是有失衡。 這一點跟記帳很像，唯有透過紀錄並反思自己的資源分配時，才會知道要如何改善自己的行為。\n總結  理解資源是有限的，你無法同時兼顧所有事物，但可以透過分配達到平衡。 每天只選擇三項，並盡全力達到目標，甚至做得更好。 持續記錄自己的選擇，一段時間後反思是否有失衡或是可以調整的部分。  ","date":"09","image":"https://i.imgur.com/FFnNXQ8.jpg","permalink":"https://martinios.com/blog/read-pick-three/","tags":["iOS","Xcode","develope"],"title":"【書摘】選 3 哲學 - 不平衡才能真正的平衡"},{"categories":["develope"],"contents":"有好多事想做，為什麼時間總是不夠？ 有多少人跟曾經的我一樣，工作與生活總是達不到平衡，朝九晚九的工作、長年被犧牲的睡眠、偶爾才回一次的老家、總是明天才開始的運動計劃。\n想做的事太多，每一樣都做一點，但每一樣都沒有辦法好好完成，如果你也是這樣，那推薦你看這本書，也許你會得到一些平衡工作與生活的啟發。\n什麼是「選三哲學」？ 其實這個概念非常簡單，就是要先理解在一天24小時內基本上是無法兼顧所有事情的。 所以作者 蘭蒂．祖克柏（Randi Zuckerberg）把生活分成五類，在這五類中每天只選擇三項，並好好的完成。\n那這五類分別為：工作、睡眠、家庭、運動、朋友。 作者對於每一大分類都有屬於自己的小項目，例如因為興趣而培養出來的副業，也算是在工作的範疇之中，所以我認為每一大分類的小項目都是可以由自己去歸類的。\n就只選三項，並且全力以赴 我認為本書的精神除了適度分配每天執行的資源以外，更大的重點是在「全力以赴」。\n為什麼會這樣說呢？ 因為只選擇了三項，在精力及資源變多情況下，可以更充分的把精力專注在目標之中，並做得更好。 所以當每天選定三項後，保持專注在所選的項目中，專注並發揮自己 100% 的能力，會有超乎想像的成果。 別擔心剩下沒選的兩項，因為沒選到的項目，明天、後天或是下個月，如果平衡分配，一定會選到的。\n挑戰看看，並且紀錄 推薦一位作家叫梅塔Mata。 她曾說過如果看完一本書，但卻沒有把書實作在生活中，那這本書等於是白看了。 不只是要理解書中的好觀念，更要透過實作改變已經僵化的生活模式，這樣才能逐漸提升自我。\n儘管只挑選三項有時候是很困難的，但請好好保持，並且搭配紀錄，實作1-2個月後你可以回頭審視你的時間分配是不是有失衡。 這一點跟記帳很像，唯有透過紀錄並反思自己的資源分配時，才會知道要如何改善自己的行為。\n總結  理解資源是有限的，你無法同時兼顧所有事物，但可以透過分配達到平衡。 每天只選擇三項，並盡全力達到目標，甚至做得更好。 持續記錄自己的選擇，一段時間後反思是否有失衡或是可以調整的部分。  ","date":"09","image":"https://i.imgur.com/FFnNXQ8.jpg","permalink":"https://martinios.com/blog/read-pick-three2/","tags":["iOS","Xcode","develope"],"title":"【書摘】選 3 哲學 - 不平衡才能真正的平衡"},{"categories":["Develope"],"contents":"最近專案接到需求，為了避免程式被反解譯，也避免程式的核心業務邏輯暴露在外，故開始尋找 App 加固的方案。\n資訊安全這門領域其實很深，那既然剛入門我們就從基礎的開始，程式碼混淆在資安方案中算是 CP 值比較高的，開發者混淆時付出一些時間(熟悉以後還可以自動化)，但讓駭客就要多付出好幾倍的時間去破解你的程式，所以在基礎的資安加固方案中會比較推薦程式碼混淆。\n為什麼要做程式碼混淆？ 最近專案接到需求，為了避免程式被反解譯，也避免程式的核心業務邏輯暴露在外，故開始尋找 App 加固的方案。\n資訊安全這門領域其實很深，那既然剛入門我們就從基礎的開始，程式碼混淆在資安方案中算是 CP 值比較高的，開發者混淆時付出一些時間(熟悉以後還可以自動化)，但讓駭客就要多付出好幾倍的時間去破解你的程式，所以在基礎的資安加固方案中會比較推薦程式碼混淆。\n.\n如何做到程式碼混淆？ 市面上有許多的混淆工具，有收費的也有開源的，如果只是想試點水溫會建議用開源的工具玩玩看。但如果專案有時程壓力，可以試試付費的工具，畢竟省時省力 😂。\n這邊我列舉出幾個比較常見的開源混淆工具：\n(1) 「rockbruno/SwiftShield」:  這是我比較推薦的一個，效能不錯、評價高、重點是還有在維護。 手動模式（Objective-C、Swift）：採後綴混淆，簡單易用，缺點是有特定後綴的才會混淆，不適合已開發的專案。 自動模式（Swift）：全局混淆，也可以指定特定資料夾不混淆，缺點是有些語法混淆後會出錯，需要手動修復或是修改原本的程式寫法，但錯誤通常不多。  (2) 「LennonChin/Code-Confuse-Plugin」:  僅混淆 Objective-C 項目(.h.m)，Swift 需指定忽略。 需求為 Python3，以 Define 定義來替換方法名、類別名。  (3) 「onorZhang/iOSConfuse」:  採用前綴的方式進行混淆，一樣不適合已開發的專案。  使用 SwiftShield 進行程式碼混淆 SwiftShield 是一個將 iOS 專案程式碼產製亂數加密名稱的工具，其混淆範圍包含程式碼、Pod 和 Storyboard，可以保護應用程序避免被輕易的反解譯（如 class-dump 和 Cycript）。\n混淆後會是什麼樣子？ class fjiovh4894bvic: XbuinvcxoDHFh3fjid { func cxncjnx8fh83FDJSDd() { return vPAOSNdcbif372hFKF() } } 自動模式（限 Swift 使用） 使用-automatic指令，SwiftShield 將使用 SourceKit 自動混淆整個專案，混淆範圍包含程式碼、Pod 和 Storyboard。\n注意事項 ⚠️  目前有一些 SourceKit Bugs 及不會混淆的類型需注意，如果專案中剛好有遇到特定情境可能需要修改程式碼，詳請請參照本連結。 檔案名稱及資料夾名稱不可包含空白，否則執行混淆時會報錯。 檔案名稱及資料夾名稱若有\u0026quot;-\u0026ldquo;依然會被混淆。  執行步驟  從此處下載最新的 SwiftShield 打開終端機，cd 移動至下載的 Swiftsheild 文件夾下 設置 SwiftShield 的使用權限  # 給予讀、寫、執行的權限 $ sudo chmod -R 777 ./swiftsheild(文件路徑) # 如果使用CocoaPods，需要解鎖權限 $ sudo chmod -R 774 [專案路徑] 官方文件有提到，如果有使用到會修改文件的第三方框架，如：R.Swift、SwiftGen，需在專案中的 TARGETS -\u0026gt; Build Phases -\u0026gt; Run Script 修改指令，這裡以 R.Swift 為範例：  # 原本的 Run Script \u0026quot;$PODS_ROOT/R.swift/rswift\u0026quot; generate \u0026quot;$SRCROOT/[專案名稱]\u0026quot; # 修改後的 Run Script if [ \u0026quot;$SWIFTSHIELDED\u0026quot; != \u0026quot;true\u0026quot; ]; then \u0026quot;$PODS_ROOT/R.swift/rswift\u0026quot; generate \u0026quot;$SRCROOT/[專案名稱]\u0026quot; fi  準備就緒後就可以來下指令進行混淆了，自動模式的指令有以下幾種\n必填參數：\n -automatic：啟用自動模式。 -project-root：專案項目的根目錄。 SwiftShield 會向下搜索你的項目文件。 -automatic-project-file：專案項目的主要.xcodeproj / .xcworkspace文件。 -automatic-project-scheme [myScheme]：專案項目的Scheme。  可選參數：\n -sdk：防止混淆公共類別和方法。如果你正在構建SDK項目，請使用它。 -ignore-modules：防止混淆某些資料夾，並以逗號分隔。如果無法正確混淆某個資料夾，請使用此選項。 要注意的是，是輸入資料夾的確切名稱，而不是目標名稱。例：MyLib,MyAppRichNotifications,MyAppWatch_Extension -show-sourcekit-queries：打印發送到 SourceKit 的查詢。要注意的是這指令會造成非常龐大的輸出，因此只能將其用於錯誤報告和功能開發！  實際組出來以後\n  $ #指令結構 $[SwiftShield 路徑]+空白+\u0026quot;swiftshield\u0026quot;+空白+\u0026quot;-automatic\u0026quot;+空白+\u0026quot;-project-root\u0026quot;+空白+\u0026quot;-automatic-project-file\u0026quot;+空白+[xcworkspace 路徑]+空白+\u0026quot;-automatic-project-scheme\u0026quot;+空白+[專案Target]+空白+\u0026quot;-ignore-modules\u0026quot;+空白+[要忽略的項目(含Pods項目，且需以資料夾名稱為主)] $ #實際執行指令 $ /Users/mac/swiftshield-3.5.1/bin/swiftshield swiftshield -automatic -project-root /Users/mac/[專案資料夾名稱] -automatic-project-file /Users/mac/[專案名稱].xcworkspace -automatic-project-scheme [專案Target] -ignore-modules Alamofire,MJRefresh,SDWebImage...  指令需要執行一小段時間，過程會看到Building project to gather modules and compiler arguments...、Overwriting、Checking等訊息。\n  接著直接打開專案執行看看，通常會出現一點混淆錯誤的Error，基本上都是重複的錯誤，這部分跟程式寫法有關。若不想改動原本程式碼，基本上混淆後再逐一修改即可發布。\n  混淆失敗怎麼辦？ 編譯過程失敗\n 檢查所有檔案名稱或資料夾名稱是否有包含空白。 檢查是否給與正確的權限。 打開下載的 swiftshield 執行檔是否有被 MacOS 安全性阻擋。  混淆後專案執行失敗或 Crash\n 檢查是否有使用到SourceKit Bugs 及不會混淆的類型。 帶 selector 方法的參數中若含有字串，盡量用變量或常量代替  // 修改前 let item1 = UIBarButtonItem(title: \u0026quot;取消\u0026quot;, style: .plain, target: self, action: #selector(cancelButtonClick(sender:))) //混淆後會​​報錯，混淆後會把）}一起混淆進去，導致項目缺少）}而報錯 // 修改後 let cencelTitle = \u0026quot;取消\u0026quot; let item1 = UIBarButtonItem(title: cencelTitle, style: .plain, target: self, action: #selector(cancelButtonClick(sender:))) .xib 文件有可能不會連動到混淆後的類別，要修改File's Owner 若錯誤不多可以手動修復，混淆後會產生 swiftshield-output 資料夾，內有conversionMap.txt，可以對應混淆前後的字串。  對加密的 Crash logs 進行反混淆處理 成功混淆專案後，SwiftShield 將產生一個輸出文件夾，其中包含一個conversionMap.txt 文件，其中包含對該專案所做的所有更改，讓你查明加密對象的前後的字串。\n// // SwiftShield // Conversion Map // Automatic mode for MyApp 2.0 153, 2018-09-24 10.23.48 // Data: ViewController ===\u0026gt; YytSIcFnBAqTAyR AppDelegate ===\u0026gt; uJXJkhVbwdQGNhh SuperImportantClassThatShouldBeHidden ===\u0026gt; GDqKGsHjJsWQzdq 如果你要對混淆後的程式碼文件進行復原，可以透過以下指令復原\n$ swiftshield -deobfuscate CRASH_FILE -deobfuscate-map PATH_TO_CONVERSION_MAP 總結 資訊安全的領域很深，從連線加密、程式碼混淆、LLVM編譯器混淆等等一關接著一關，都是為了保護重要的機密或接口不會被竊取盜用，造成商業損失。\n其實 iOS 系統已經是相對安全的，但對於通訊、金融行業還是要有一定程度的資安保護，畢竟任何資安加固的措施都不能保證百分之百安全，但透過增加駭客反編譯的難度，就能有效降低駭客破解的速度及讓駭客放棄破解打退堂鼓。\nReference  SwiftShield SwiftShield代碼混淆 Swiftshield：SwiftOBJ-C 代碼混淆工具  另外我在搜尋資料時也意外發現有幾篇文章不錯，也分享跟大家。\n 資訊安全從連線加密入手  ","date":"09","image":"https://i.imgur.com/Xa73TNl.png","permalink":"https://martinios.com/blog/ios-information-security-swiftshield/","tags":["iOS","Swift","Security"],"title":"【 iOS 】資訊安全加固方案 - 程式碼混淆(SwiftShield)"}]