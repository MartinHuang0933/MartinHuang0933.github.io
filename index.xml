<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PmThinking產品人-實用工具x高效生活</title>
    <link>https://martinhuang0933.github.io/</link>
    <description>Recent content on PmThinking產品人-實用工具x高效生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 01 Aug 2021 16:56:47 +0600</lastBuildDate><atom:link href="https://martinhuang0933.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【 PM 】產品新手如何分析數據？帶你深入淺出數據知識</title>
      <link>https://martinhuang0933.github.io/blog/pm-categories-data-analysis/</link>
      <pubDate>Sun, 01 Aug 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/pm-categories-data-analysis/</guid>
      <description>許多產品經理每天打開電腦第一件事就是看數據 舉凡流量、用戶成長率以及轉化率等等。 面對這麼多數據，你真的知道數據要怎麼看嗎？
其實數據種類再多，只要把握好以下三個分類， 你就可以精準掌握到數據背後的意義。
1️⃣ 業務數據
舉例：現金流、轉化率、用戶留存率、活躍度等等。
這些數據非常重要，因為日常的工作都是為了提升這些核心指標。 例如公司季目標是提升訂單成交率，那轉化率就是核心， 接著會開始分析成交訂單前哪些功能是必要路徑，思考如何讓用戶更方便的下訂單。
2️⃣ 用戶背景數據
舉例：用戶性別、地區、興趣標籤等等
我們可以透過用戶背景與行為數據去尋找它跟業務指標的關聯性。 例如我們產品的主要市場是 25 歲到 35 歲的職場女性， 對新品與優惠商品的購買力較強，也許可以透過限時限量的優惠促銷來刺激訂單。</description>
    </item>
    
    <item>
      <title>【職場】自我介紹很尷尬？萬用公式讓人留下好印象</title>
      <link>https://martinhuang0933.github.io/blog/business-self-introduction-method/</link>
      <pubDate>Wed, 21 Jul 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/business-self-introduction-method/</guid>
      <description>近期為求職旺季，很多應屆的畢業生都逐漸的投入職場。
許多優秀的同學因為沒有入職的經驗，往往不知道第一天會做哪些事情，也不知道要準備些什麼。
那以產品人自身的經驗來說，除了報到、認識公司環境以外，最重要的就是自我介紹，這是個可以快速建立良好第一印象的機會，為你在職場的人際關係打下基礎。
教你自我介紹的萬用公式，讓人留下深刻印象：
我是誰 + 為什麼來這裡 + 我能帶來什麼價值
📌 我是誰： 這個除了你的姓名以外，可以說一說你有做過哪些事蹟，例如我在大學時事擔任社團社長，或是我對於健身有些研究常指導別人等等。
這個環節可以透過簡單的背景故事讓大家初步認識你。
📌 我為什麼來這裡： 如果是入職，可以說因為喜歡公司的哪個部分所以對於公司很有憧憬，同時也想向各位前輩們學習專業知識、領域經驗等。
如果是參加社交活動，可以說我在哪裡得知這個活動，來這裡是想跟大家交流什麼話題等。
這個環節也是讓大家初步認識你，可以簡單敘述，但下一點才是比較重要的。
📌 我能帶來什麼價值： 這一點比較關鍵，如果可以與「我是誰」呼應的話是最好的。</description>
    </item>
    
    <item>
      <title>【職場】展現三大能力，大幅提高面試成功率</title>
      <link>https://martinhuang0933.github.io/blog/business-interview-skills/</link>
      <pubDate>Mon, 05 Jul 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/business-interview-skills/</guid>
      <description>最近到了畢業季，是一年一度校園招募的季節。 剛畢業對於職場還很陌生的你，準備好要如何跟面試官應對了嗎？ 如果你正在準備面試，那這篇文章正是你最需要的！
面試除了是展現自己最好的一面以外，更是要傳達面試官想看到部分， 讓面試官覺得自己就是最適合這個職缺的應聘者。 以下這三個能力，就是面試官最看重的部分：
1️⃣ 專業能力
面試官看你是否具備這個職位所要求的專業能力， 例如你有沒有這個職缺相關的相關工作經驗或是實習經驗， 能證明你對這個領域熟悉，並且有實際參與執行過。
2️⃣ 個人能力
個人能力是指一個人的邏輯思維、溝通管理、表達能力、抗壓度等等。 目的是要看你是不是一個做事有方法、有邏輯，且具備溝通能力可以協調任務的人 團隊是人與人之間的合作，並不是獨自完成工作就好。
3️⃣ 未來潛力
潛力就是你跟公司可以一同成長多久，是不是可以長期合作的夥伴。 例如職業規劃是如何？以及如何看待這個行業？你為什麼加入我們公司？ 這些觀點都是想理解你對於工作、產業、職涯的看法。</description>
    </item>
    
    <item>
      <title>【 PM 】專案常常 Delay？四個法則帶你拆解工作項目！</title>
      <link>https://martinhuang0933.github.io/blog/pm-work-breakdown-structure/</link>
      <pubDate>Sun, 04 Jul 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/pm-work-breakdown-structure/</guid>
      <description>又到了專案要驗收進度的時候了， 你是屬於還是最後一刻還在趕工？還是進度早已按計劃完成？ 如果你是前者，那你一定要學習拆解工作項目的四個法則！
在專案管理技巧中，有一個專業知識叫工作分解結構 WBS (Work Breakdown Structure)，這個步驟就是要把專案所有必要的工作找出來，並且根據類別區分，做為定義完整專案工作的依據。
例如：我在舉辦講座時，會把每個時段、每個組別、每個事務都明確列出來，列出來以後我才可以預估要去搜集哪些資源、要去協調哪些人、要準備與產出哪些事務，這個流程表出來以後，我就知道要如何分配工作事項了。
當你把事情分類出來以後，一定會遇到一個問題，那就是工作項目可能需要好幾個工作日來完成。 例如：需要五天開發，如果你就老實的安排五天，那假設到了第四天你去詢問進度時，才發現負責人只完成 30%，那就會出現了專案進度 Delay 的情況，這時候整個專案的壓力就會提高。
那要如何才能有效地規劃工作時程呢？不會切的太粗糙，也不會切得太瑣碎。 教你四個法則，讓你順利掌握工作進度。
1️⃣ 盡可能的拆細，工作項目越細越準（消除不確定性）
這個可以依照你對專案的把握度進行調整。 如果你對專案把握度低，可以盡可能的拆分工作項目，你對整個全貌越清楚，對時間掌握越準。</description>
    </item>
    
    <item>
      <title>【 PM 】為什麼產品優化了，客戶卻沒有更滿意？</title>
      <link>https://martinhuang0933.github.io/blog/pm-kano/</link>
      <pubDate>Tue, 15 Jun 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/pm-kano/</guid>
      <description>身為產品經理，對產品有無限多個優化的點子 但要如何挑選出可以帶來最大效益的優化方案呢？
這次要介紹的是日本東京理工大學教授狩野紀昭(Noriaki Kano)在1984年提出的「二維品質模式」，也稱為狩野模型，將功能需求的品質與滿意度畫在二維座標軸上，以四個象限來分析需求可以帶來的效益。
基本需求型：圖中的綠線，是客戶眼中的基本功能，做得好不會加分，但做不好可是會大大扣分的，例如：外賣平台的購買與結帳付款流程。
期望型：圖中的藍線，這類需求會隨著品質的提升，讓客戶滿意度也提升，例如：外賣平台可點餐的餐廳數量越多越好，餐點價格越划算客戶就會越滿意。
魅力型：圖中的紅線，這類需求是屬於客戶沒有預期的功能，但品質來到一定程度以後，會讓客戶覺得驚艷，對產品、品牌感到加分，例如有些 Uber 司機會在車上提供空氣除菌機、消毒酒精，這些屬於非必要的額外服務，但會讓你感到加分。
無差異型：圖中的灰色區域，這類需求無論品質好壞，使用者都不會太大的感覺，例如：吃速食或是夜市的時候，餐點的擺盤與精緻度可能就不會是重點，就算花了許多心思，用戶也不一定能有明顯的感受。
總結「狩野模型」的三大重點，幫助我們判斷需求的優先級：
 先滿足基本需求型的功能，讓產品可以正常運作，先求有再求好。 靠期望型的需求不斷優化產品，同時你也可以感受到產品持續進步。 靠魅力型的需求來讓產品加分，這樣才有辦法做出口碑，打開知名度與客群。  ✨ 追蹤產品人 @，讓我陪你一起成長
✨ 你認為優秀的產品經理是什麼模樣呢？ 歡迎留言跟我說！</description>
    </item>
    
    <item>
      <title>【PM】成為優秀產品經理的三個要素</title>
      <link>https://martinhuang0933.github.io/blog/pm-key-skills/</link>
      <pubDate>Sat, 05 Jun 2021 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/pm-key-skills/</guid>
      <description>在產品經理的成長道路上，總是有許多知識要學 而哪些觀念造就了產品經理的差異呢？
以下總結三點常見的觀念，讓你成為優秀的產品經理
  你不一定需要真的把產品做出來
但你一定要知道產品怎麼做。    你不一定要取得所有數據，
但要知道遇到問題該看哪些數據。
  具有全局觀，瞭解每個需求背後的意義
  ✨ 追蹤產品人 @，讓我陪你一起成長</description>
    </item>
    
    <item>
      <title>Henara Colii</title>
      <link>https://martinhuang0933.github.io/author/henara-colii/</link>
      <pubDate>Tue, 02 Feb 2021 10:20:19 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/author/henara-colii/</guid>
      <description>Maecenas sit amet purus eget ipsum elementum venenatis. Aenean maximus urna magna elementum venenatis, quis rutrum mi semper non purus eget ipsum elementum venenatis.</description>
    </item>
    
    <item>
      <title>Lubana Era</title>
      <link>https://martinhuang0933.github.io/author/lubana-era/</link>
      <pubDate>Tue, 26 Jan 2021 10:14:19 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/author/lubana-era/</guid>
      <description>Maecenas sit amet purus eget ipsum elementum venenatis. Aenean maximus urna magna elementum venenatis, quis rutrum mi semper non purus eget ipsum elementum venenatis.</description>
    </item>
    
    <item>
      <title>Martin Huang</title>
      <link>https://martinhuang0933.github.io/author/martin-huang/</link>
      <pubDate>Tue, 26 Jan 2021 10:14:19 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/author/martin-huang/</guid>
      <description>Maecenas sit amet purus eget ipsum elementum venenatis. Aenean maximus urna magna elementum venenatis, quis rutrum mi semper non purus eget ipsum elementum venenatis.</description>
    </item>
    
    <item>
      <title>【 iOS 】NSString 要使用 copy 還是 strong 呢？</title>
      <link>https://martinhuang0933.github.io/blog/ios-nsstring-copy-or-strong/</link>
      <pubDate>Mon, 28 Dec 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-nsstring-copy-or-strong/</guid>
      <description>最近在複習 iOS 面試題系列，看到這一題想起幾年前剛接觸 Objective-C ，剛開始觀念還沒有建立起來，也曾經因為這個屬性花了不少時間Debug，雖然現在觀念已經搞懂了，但還是趁這個機會複習筆記一下。
什麼情況下會有差異？ 你可以先記得，大部分的情況都會使用copy。
而 copy 與 strong 的差別，在於 copy 是儲存「值」，strong 是儲存「記憶體位址」。
舉個例子 // .h file @property (strong,nonatomic) NSString *strongStr; @property (copy, nonatomic) NSString *copyStr; // .</description>
    </item>
    
    <item>
      <title>【 Mac 】解決 Touch Bar 失效問題</title>
      <link>https://martinhuang0933.github.io/blog/mac-fix-touchbar/</link>
      <pubDate>Fri, 04 Dec 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/mac-fix-touchbar/</guid>
      <description>自從蘋果在 2016 年在 Macbook 新增 TouchBar 之後，Macbook的使用上又多了一種方式。
但有時候在使用上會遇到一些奇怪的Bug，舉凡 TouchBar 失靈、Esc消失等等，在這裡我記錄了一些解決的方式。
最快解決方案 - 指令 基本上最快的方式就是去終端機下指令，直接由指令重啟 TouchBar 。
&amp;gt; killall ControlStrip  但後來我覺得要記得指令實在是有點違反人性，因為不是每天都會發生失靈的狀況。</description>
    </item>
    
    <item>
      <title>【 iOS 】如何有效地清理 Xcode</title>
      <link>https://martinhuang0933.github.io/blog/ios-how-to-clean-xocde/</link>
      <pubDate>Wed, 02 Dec 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-how-to-clean-xocde/</guid>
      <description>大家都知道 Xcode 除了是吃效能的怪獸以外，同時也是很會吃儲存空間的開發工具。
若一開始再購買 mac 時沒有把硬碟空間買好買滿，那未來在開發時很有可能會遇到空間不足的問題。尤其是在 Xcode 改版時，如果要同時兼容新舊版本，那就會是一件非常痛苦的事。
以下一些清空間的方法，希望可以幫助到還在苦海的各位 (我也曾經在那片海裡QQ)。
1. Build App caches 用途： 儲存各App Build的結果，並生成索引
位置： ~/Library/Developer/Xcode/DerivedData
刪除方法： 直接刪除 DerivedData 內所有檔案即可</description>
    </item>
    
    <item>
      <title>【 iOS 】Unable to simultaneously satisfy constraints 約束設定錯誤處理</title>
      <link>https://martinhuang0933.github.io/blog/ios-fix-layout-constraints/</link>
      <pubDate>Sat, 07 Nov 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-fix-layout-constraints/</guid>
      <description>在iOS開發中，幾乎所有頁面都會使用Autolayout的方式去排版，而在設定完LayoutConstraints後，有時會在Runtime出現一些Error log，雖然不一定會影響顯示出來的排版，但有報錯基本上就要修正。
Error Log [LayoutConstraints] Unable to simultaneously satisfy constraints. Probably at least one of the constraints in the following list is one you don&amp;#39;t want.</description>
    </item>
    
    <item>
      <title>【 iOS 】Singleton Design Pattern 單例設計模式</title>
      <link>https://martinhuang0933.github.io/blog/ios-singleton-design-pattern/</link>
      <pubDate>Sat, 24 Oct 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-singleton-design-pattern/</guid>
      <description>什麼是Singleton？ 在許多物件導向設計的程式語言中，單例設計模式非常常見，而他的實際效益就是可以確保在整個應用程式中只會有一個實體，且生命週期也跟應用程式相同，在應用程式啟動時就會自動幫我們建立了。 在iOS開發學習的過程中也許你已經用了許多Singleton的物件了，只是你還不知道而已，例如：UIColor、FileManager等等。
Singleton 會用在哪些場合？ Singleton因為具有唯一性，所以通常會用於：
 環境變數、已定義的參數檔案 常用的資料處理算法，如字串轉換、時間轉換、資料庫連接、網路連接等等。  Singleton 怎麼寫？ 建立Singleton最基礎的寫法就是判斷實體是不是為空值，如果是空值就會直接建立。 在建立時需要注意執行緒衝突，所以我們需要多加上執行緒的安全機制，實際程式碼如下。
// Objective-C 版本 + (instancetype)shareManager{ @synchronized(self){ if (!</description>
    </item>
    
    <item>
      <title>如何創造你想要的生活？</title>
      <link>https://martinhuang0933.github.io/blog/designing-your-life/</link>
      <pubDate>Tue, 14 Jul 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/designing-your-life/</guid>
      <description>.
 現在你的模樣，就是由每過去的自己拼湊而成； 所以你現在所走的每一步，都正在定義你未來的模樣。
 .
你是否曾經想過三年後的自己會是什麼樣子？ 前一陣子偶然加入創業小聚的討論，聊到創業過程中的大小事以及過來人的經驗談。 我發現在社群中很多人都在開創事業的道路上努力，無論收入高低、職業族群等等，大家都有一個共通點，都擁有自己理想目標的藍圖。
在你心中，理想目標的藍圖會是什麼模樣呢？ 每個人都有屬於自己獨特的答案，可能是在舞台上發光發熱，也有可能是在喜歡的城市裡愜意生活。 但無論是什麼，出發總要有個方向，有目標我們才知道要往哪裡努力、前進。
.
有了目標，就大膽的往理想前進 清楚了自己想要什麼，知道目標在哪裡後，恭喜你離理想又更進了一步。
在上週的討論中，Metta也有分享她實作過的生活儀式，對於創造理想的生活非常的有幫助。 她的實作方法是由早晨開始，總共會花大約30分鐘到60分鐘，長短可以自己決定，主要分為三個步驟，在起床後執行，每一步驟執行10-20分鐘。
STEP 1 . 自律 很多上班族因為上班時間較長，覺得下班時間特別寶貴，晚上回到家想放鬆一下追個劇、滑個手機，一轉眼就過了午夜12點，但劇還沒追完又捨不得睡，結果熬夜造成隔天上班效率不高，就形成了加班與熬夜的惡性循環。</description>
    </item>
    
    <item>
      <title>【書摘】選 3 哲學 - 不平衡才能真正的平衡</title>
      <link>https://martinhuang0933.github.io/blog/read-pick-three/</link>
      <pubDate>Sat, 09 May 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/read-pick-three/</guid>
      <description>有好多事想做，為什麼時間總是不夠？ 有多少人跟曾經的我一樣，工作與生活總是達不到平衡，朝九晚九的工作、長年被犧牲的睡眠、偶爾才回一次的老家、總是明天才開始的運動計劃。
想做的事太多，每一樣都做一點，但每一樣都沒有辦法好好完成，如果你也是這樣，那推薦你看這本書，也許你會得到一些平衡工作與生活的啟發。
什麼是「選三哲學」？ 其實這個概念非常簡單，就是要先理解在一天24小時內基本上是無法兼顧所有事情的。 所以作者 蘭蒂．祖克柏（Randi Zuckerberg）把生活分成五類，在這五類中每天只選擇三項，並好好的完成。
那這五類分別為：工作、睡眠、家庭、運動、朋友。 作者對於每一大分類都有屬於自己的小項目，例如因為興趣而培養出來的副業，也算是在工作的範疇之中，所以我認為每一大分類的小項目都是可以由自己去歸類的。
就只選三項，並且全力以赴 我認為本書的精神除了適度分配每天執行的資源以外，更大的重點是在「全力以赴」。
為什麼會這樣說呢？ 因為只選擇了三項，在精力及資源變多情況下，可以更充分的把精力專注在目標之中，並做得更好。 所以當每天選定三項後，保持專注在所選的項目中，專注並發揮自己 100% 的能力，會有超乎想像的成果。 別擔心剩下沒選的兩項，因為沒選到的項目，明天、後天或是下個月，如果平衡分配，一定會選到的。
挑戰看看，並且紀錄 推薦一位作家叫梅塔Mata。 她曾說過如果看完一本書，但卻沒有把書實作在生活中，那這本書等於是白看了。 不只是要理解書中的好觀念，更要透過實作改變已經僵化的生活模式，這樣才能逐漸提升自我。</description>
    </item>
    
    <item>
      <title>【 iOS 】資訊安全加固方案 - 程式碼混淆(SwiftShield)</title>
      <link>https://martinhuang0933.github.io/blog/ios-information-security-swiftshield/</link>
      <pubDate>Thu, 09 Apr 2020 16:56:47 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/blog/ios-information-security-swiftshield/</guid>
      <description>最近專案接到需求，為了避免程式被反解譯，也避免程式的核心業務邏輯暴露在外，故開始尋找 App 加固的方案。
資訊安全這門領域其實很深，那既然剛入門我們就從基礎的開始，程式碼混淆在資安方案中算是 CP 值比較高的，開發者混淆時付出一些時間(熟悉以後還可以自動化)，但讓駭客就要多付出好幾倍的時間去破解你的程式，所以在基礎的資安加固方案中會比較推薦程式碼混淆。
為什麼要做程式碼混淆？ 最近專案接到需求，為了避免程式被反解譯，也避免程式的核心業務邏輯暴露在外，故開始尋找 App 加固的方案。
資訊安全這門領域其實很深，那既然剛入門我們就從基礎的開始，程式碼混淆在資安方案中算是 CP 值比較高的，開發者混淆時付出一些時間(熟悉以後還可以自動化)，但讓駭客就要多付出好幾倍的時間去破解你的程式，所以在基礎的資安加固方案中會比較推薦程式碼混淆。
.
如何做到程式碼混淆？ 市面上有許多的混淆工具，有收費的也有開源的，如果只是想試點水溫會建議用開源的工具玩玩看。但如果專案有時程壓力，可以試試付費的工具，畢竟省時省力 😂。
這邊我列舉出幾個比較常見的開源混淆工具：
(1) 「rockbruno/SwiftShield」:  這是我比較推薦的一個，效能不錯、評價高、重點是還有在維護。 手動模式（Objective-C、Swift）：採後綴混淆，簡單易用，缺點是有特定後綴的才會混淆，不適合已開發的專案。 自動模式（Swift）：全局混淆，也可以指定特定資料夾不混淆，缺點是有些語法混淆後會出錯，需要手動修復或是修改原本的程式寫法，但錯誤通常不多。  (2) 「LennonChin/Code-Confuse-Plugin」:  僅混淆 Objective-C 項目(.</description>
    </item>
    
    <item>
      <title>Search Result</title>
      <link>https://martinhuang0933.github.io/search/</link>
      <pubDate>Mon, 24 Sep 2018 11:07:10 +0600</pubDate>
      
      <guid>https://martinhuang0933.github.io/search/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://martinhuang0933.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martinhuang0933.github.io/about/</guid>
      <description>A content writer with over 12 years experience working across brand identity, publishing and digital products. Maecenas sit amet purus eget ipsum elementum venenatis.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://martinhuang0933.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martinhuang0933.github.io/contact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Elements</title>
      <link>https://martinhuang0933.github.io/elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martinhuang0933.github.io/elements/</guid>
      <description>Heading example Here is example of hedings. You can use this heading by following markdownify rules. For example: use # for heading 1 and use ###### for heading 6.</description>
    </item>
    
    <item>
      <title>No Search Found</title>
      <link>https://martinhuang0933.github.io/404/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martinhuang0933.github.io/404/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy</title>
      <link>https://martinhuang0933.github.io/privacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martinhuang0933.github.io/privacy/</guid>
      <description>Responsibility of Contributors Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat quisque aliquam sagittis.</description>
    </item>
    
    <item>
      <title>Terms And Conditions</title>
      <link>https://martinhuang0933.github.io/terms-conditions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martinhuang0933.github.io/terms-conditions/</guid>
      <description>Responsibility of Contributors Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat quisque aliquam sagittis.</description>
    </item>
    
  </channel>
</rss>
